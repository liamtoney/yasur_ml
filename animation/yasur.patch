diff --git a/sonify/sonify.py b/sonify/sonify.py
index bb61914..e159ef0 100755
--- a/sonify/sonify.py
+++ b/sonify/sonify.py
@@ -3,0 +4 @@ import argparse
+import os
@@ -12,0 +14 @@ import numpy as np
+import pandas as pd
@@ -55 +57 @@ MS_PER_S = 1000  # [ms/s]
-EXTENDFRAC = 0.04
+EXTENDFRAC = 0.055
@@ -116,0 +119,9 @@ def sonify(
+    # Right away, determine if there's a features file to use
+    feather_dir = Path(__file__).resolve().parents[3] / 'features' / 'feather'
+    feather_list = sorted(feather_dir.glob('*.feather'))
+    try:
+        features_file = feather_list[0]
+        print(f'Using {features_file} for catalog!')
+    except IndexError:  # List is empty (i.e., no files were found!)
+        raise FileNotFoundError('No feather files found!')
+
@@ -223 +234 @@ def sonify(
-    def _march_forward(frame, spec_line, wf_line, time_box, wf_progress):
+    def _march_forward(frame, progress_line, time_box, wf_progress, cat_ax):
@@ -225,4 +236,4 @@ def sonify(
-        spec_line.set_xdata(times[frame].matplotlib_date)
-        wf_line.set_xdata(times[frame].matplotlib_date)
-        time_box.txt.set_text(times[frame].strftime('%H:%M:%S'))
-        tr_progress = tr.copy().trim(endtime=times[frame])
+        progress_line.set_xdata(times[frame].matplotlib_date)
+        progress_line.set_linewidth(1)
+        time_box.txt.set_text(times[frame].strftime('%H:%M'))
+        tr_progress = tr_trim.copy().trim(endtime=times[frame])
@@ -230,0 +242,16 @@ def sonify(
+        cat_progress = catalog[catalog.time <= times[frame]]
+        if not cat_progress.empty:
+            a_cumsum = (cat_progress.label == 'A').cumsum().tolist()
+            c_cumsum = (cat_progress.label == 'C').cumsum().tolist()
+            cat_ax.stackplot(
+                [t.matplotlib_date for t in cat_progress.time]
+                + [times[frame].matplotlib_date],
+                a_cumsum + [a_cumsum[-1]],
+                c_cumsum + [c_cumsum[-1]],
+                colors=(os.environ['VENT_A'], os.environ['VENT_C']),
+                clip_on=False,
+            )
+            recent_label = cat_progress.label.tolist()[-1]
+            color = os.environ[f'VENT_{recent_label}']
+            progress_line.set_color(color)
+            time_box.txt._text.set_color(color)
@@ -236,0 +264,13 @@ def sonify(
+    matplotlib.rcParams['font.size'] = 9
+
+    # Read in the features file, process into a catalog by subsetting to just one
+    # station and removing the unneeded features columns
+    catalog = pd.read_feather(features_file)
+    catalog = catalog[catalog.station == tr.stats.station][['time', 'label']]
+    catalog.time = [UTCDateTime(t) for t in catalog.time]
+
+    # Trim catalog duration to match waveform
+    catalog = catalog[(catalog.time >= starttime) & (catalog.time <= endtime)]
+    catalog.reset_index(inplace=True, drop=True)
+    print('Catalog label totals for this time period:')
+    print(catalog.label.value_counts())
@@ -239,0 +280 @@ def sonify(
+        catalog,
@@ -281 +322 @@ def sonify(
-    output_file = output_dir / f'{tr_id_str}_{speed_up_factor}x.mp4'
+    output_file = output_dir / f'{tr_id_str}_{speed_up_factor}x_catalog.mp4'
@@ -289,0 +331 @@ def _spectrogram(
+    catalog,
@@ -325 +367 @@ def _spectrogram(
-        ylab = 'Pressure (Pa)'
+        ylab = 'Pressure\n(Pa)'
@@ -357 +399 @@ def _spectrogram(
-    gs = GridSpec(2, 2, figure=fig, height_ratios=[2, 1], width_ratios=[40, 1])
+    gs = GridSpec(3, 2, figure=fig, height_ratios=[3, 1, 2], width_ratios=[40, 1])
@@ -360 +402,4 @@ def _spectrogram(
-    wf_ax = fig.add_subplot(gs[1, 0], sharex=spec_ax)  # Share x-axis with spec
+    wf_ax = fig.add_subplot(
+        gs[1, 0], sharex=spec_ax, zorder=10
+    )  # Share x-axis with spec
+    wf_ax.patch.set_alpha(0)
@@ -361,0 +407,3 @@ def _spectrogram(
+    cat_ax = fig.add_subplot(gs[2, 0], sharex=spec_ax)  # Share x-axis with spec
+
+    tr_trim = tr.copy().trim(starttime, endtime)
@@ -364,2 +412,18 @@ def _spectrogram(
-    wf_ax.plot(tr.times('matplotlib'), tr.data * rescale, '#b0b0b0', linewidth=wf_lw)
-    wf_progress = wf_ax.plot(np.nan, np.nan, 'black', linewidth=wf_lw)[0]
+    wf_ax.plot(
+        tr_trim.times('matplotlib'),
+        tr_trim.data * rescale,
+        '#b0b0b0',
+        linewidth=wf_lw,
+        clip_on=False,
+        solid_capstyle='round',
+        zorder=21,
+    )
+    wf_progress = wf_ax.plot(
+        np.nan,
+        np.nan,
+        'black',
+        linewidth=wf_lw,
+        clip_on=False,
+        solid_capstyle='round',
+        zorder=21,
+    )[0]
@@ -367,2 +431 @@ def _spectrogram(
-    wf_ax.grid(linestyle=':')
-    max_value = np.abs(tr.copy().trim(starttime, endtime).data).max() * rescale
+    max_value = np.abs(tr_trim.data).max() * rescale
@@ -372 +435 @@ def _spectrogram(
-        t_mpl, f, sxx_db, cmap='inferno', shading='nearest', rasterized=True
+        t_mpl, f, sxx_db, cmap='summer', shading='nearest', rasterized=True
@@ -376 +438,0 @@ def _spectrogram(
-    spec_ax.grid(linestyle=':')
@@ -380,0 +443,15 @@ def _spectrogram(
+    # Set up catalog axis
+    cat_ax.stackplot(
+        np.nan,
+        np.nan,
+        np.nan,
+        colors=(os.environ['VENT_A'], os.environ['VENT_C']),
+        labels=('S', 'N'),
+        clip_on=False,
+    )
+    cat_ax.set_ylim(0, catalog.shape[0])
+    cat_ax.set_ylabel('Cumulative # of\nlabeled events')
+    cat_ax.legend(
+        loc='upper left', title='Subcrater', bbox_to_anchor=(1, 1.1), frameon=False
+    )
+
@@ -384 +461,3 @@ def _spectrogram(
-    wf_ax.xaxis.set_major_formatter(_UTCDateFormatter(locator, is_local_time))
+    cat_ax.xaxis.set_major_formatter(_UTCDateFormatter(locator, is_local_time))
+    for ax in spec_ax, wf_ax:
+        ax.xaxis.offsetText.set_visible(False)
@@ -391,3 +470 @@ def _spectrogram(
-    line_kwargs = dict(x=starttime.matplotlib_date, color='forestgreen', linewidth=1)
-    spec_line = spec_ax.axvline(**line_kwargs)
-    wf_line = wf_ax.axvline(ymin=0.01, clip_on=False, zorder=10, **line_kwargs)
+    timing_color = 'black'
@@ -395 +472 @@ def _spectrogram(
-        s=starttime.strftime('%H:%M:%S'),
+        s=starttime.strftime('%H:%M'),
@@ -398,2 +475,2 @@ def _spectrogram(
-        bbox_to_anchor=[1, 1],
-        bbox_transform=wf_ax.transAxes,
+        bbox_to_anchor=[1, 0],
+        bbox_transform=spec_ax.transAxes,
@@ -401 +478 @@ def _spectrogram(
-        prop=dict(color='forestgreen'),
+        prop=dict(color=timing_color),
@@ -405 +481,0 @@ def _spectrogram(
-    time_box.zorder = 12  # This should place it on the very top; see below
@@ -407 +482,0 @@ def _spectrogram(
-    wf_ax.add_artist(time_box)
@@ -409,6 +484,84 @@ def _spectrogram(
-    # Adjustments to ensure time marker line is zordered properly
-    # 9 is below marker; 11 is above marker
-    spec_ax.spines['bottom'].set_zorder(9)
-    wf_ax.spines['top'].set_zorder(9)
-    for side in 'bottom', 'left', 'right':
-        wf_ax.spines[side].set_zorder(11)
+    # MAKE TIME BOX GO ON TOP OF EVERYTHING
+    box_ax = fig.add_subplot(gs[0, 0], zorder=12, sharex=spec_ax, sharey=spec_ax)
+    for side in 'top', 'bottom':
+        box_ax.spines[side].set_visible(False)
+    box_ax.tick_params(
+        which='both',
+        left=False,
+        labelleft=False,
+        bottom=False,
+        labelbottom=False,
+    )
+    box_ax.patch.set_alpha(0)
+    box_ax.add_artist(time_box)
+
+    # MAKE BOTTOM SPINE GO ON TOP OF GRIDLINES
+    blah_ax = fig.add_subplot(gs[0, 0], zorder=10)
+    for side in 'left', 'right', 'top':
+        blah_ax.spines[side].set_visible(False)
+    blah_ax.tick_params(
+        which='both',
+        left=False,
+        labelleft=False,
+        bottom=False,
+        labelbottom=False,
+    )
+    blah_ax.patch.set_alpha(0)
+
+    spec_ax.tick_params(axis='x', which='both', bottom=False)
+
+    # WF axis adjustments
+    for side in 'top', 'bottom', 'right':
+        wf_ax.spines[side].set_visible(False)
+    wf_ax_ticks = wf_ax.get_yticks()
+    wf_ax.set_ylim(-250, 250)  # TODO HARDCODED
+    wf_ax.tick_params(axis='x', which='both', bottom=False)
+
+    # CAT axis adjustments
+    for side in 'top', 'right':
+        cat_ax.spines[side].set_visible(False)
+    cat_ax.set_ylim(top=100)  # TODO HARDCODED
+
+    # UNIFIED X-AXIS GRIDLINES
+    grid_ax = fig.add_subplot(gs[:, 0], zorder=9, sharex=cat_ax)
+    for spine in grid_ax.spines.values():
+        spine.set_visible(False)
+    grid_params = dict(
+        color=matplotlib.rcParams['grid.color'],
+        linewidth=matplotlib.rcParams['grid.linewidth'],
+        linestyle=':',
+    )
+    for x in cat_ax.get_xticks()[1:-1]:
+        grid_ax.axvline(x=x, **grid_params)
+    grid_ax.tick_params(
+        which='both',
+        left=False,
+        labelleft=False,
+        bottom=False,
+        labelbottom=False,
+    )
+    grid_ax.patch.set_alpha(0)
+
+    spec_ax.grid(which='both', axis='y', **grid_params)
+
+    # AXIS FOR PROGRESS LINE
+    line_ax = fig.add_subplot(gs[:, 0], zorder=11, sharex=cat_ax)
+    for side in 'left', 'right':
+        line_ax.spines[side].set_visible(False)
+    line_ax.tick_params(
+        which='both',
+        left=False,
+        labelleft=False,
+        bottom=False,
+        labelbottom=False,
+    )
+    line_ax.patch.set_alpha(0)
+    progress_line = line_ax.axvline(
+        clip_on=False,
+        ymin=0.001,
+        x=starttime.matplotlib_date,
+        color=timing_color,
+        linewidth=matplotlib.rcParams[
+            'axes.linewidth'
+        ],  # Start w/ axis width TODO DOES THIS MATTER?
+    )
@@ -444,2 +596,0 @@ def _spectrogram(
-    spec_ax.set_title(tr.id)
-
@@ -447 +598 @@ def _spectrogram(
-    fig.subplots_adjust(hspace=0, wspace=0.05)
+    fig.subplots_adjust(hspace=0.25, wspace=0.05)
@@ -467 +618 @@ def _spectrogram(
-    return fig, spec_line, wf_line, time_box, wf_progress
+    return fig, progress_line, time_box, wf_progress, cat_ax
