diff --git a/sonify/sonify.py b/sonify/sonify.py
index 3df424e..c77391d 100755
--- a/sonify/sonify.py
+++ b/sonify/sonify.py
@@ -10,6 +10,7 @@ from types import MethodType
 import matplotlib
 import matplotlib.dates as mdates
 import numpy as np
+import pandas as pd
 from matplotlib import font_manager
 from matplotlib.animation import FuncAnimation
 from matplotlib.figure import Figure
@@ -44,7 +45,7 @@ REFERENCE_VELOCITY = 1  # [m/s]
 MS_PER_S = 1000  # [ms/s]

 # Colorbar extension triangle height as proportion of colorbar length
-EXTENDFRAC = 0.04
+EXTENDFRAC = 0.055


 def sonify(
@@ -97,6 +98,15 @@ def sonify(
     .. _Nyquist frequency: https://en.wikipedia.org/wiki/Nyquist_frequency
     """

+    # Right away, determine if there's a features file to use
+    feather_dir = Path(__file__).resolve().parents[3] / 'features' / 'feather'
+    feather_list = sorted(feather_dir.glob('*.feather'))
+    try:
+        features_file = feather_list[0]
+        print(f'Using {features_file} for catalog!')
+    except IndexError:  # List is empty (i.e., no files were found!)
+        raise FileNotFoundError('No feather files found!')
+
     # Capture args and format as string to store in movie metadata
     key_value_pairs = [f'{k}={repr(v)}' for k, v in locals().items()]
     call_str = 'sonify({})'.format(', '.join(key_value_pairs))
@@ -207,23 +217,53 @@ def sonify(
     times = timing_tr.times('UTCDateTime')[:-1]  # Remove extra frame

     # Define update function
-    def _march_forward(frame, spec_line, wf_line, time_box, wf_progress):
+    def _march_forward(frame, progress_line, time_box, wf_progress, cat_ax):

-        spec_line.set_xdata(times[frame].matplotlib_date)
-        wf_line.set_xdata(times[frame].matplotlib_date)
-        time_box.txt.set_text(times[frame].strftime('%H:%M:%S'))
-        tr_progress = tr.copy().trim(endtime=times[frame])
+        progress_line.set_xdata(times[frame].matplotlib_date)
+        progress_line.set_linewidth(1)
+        time_box.txt.set_text(times[frame].strftime('%H:%M'))
+        tr_progress = tr_trim.copy().trim(endtime=times[frame])
         wf_progress.set_xdata(tr_progress.times('matplotlib'))
         wf_progress.set_ydata(tr_progress.data * rescale)
+        cat_progress = catalog[catalog.time <= times[frame]]
+        if not cat_progress.empty:
+            a_cumsum = (cat_progress.label == 'A').cumsum().tolist()
+            c_cumsum = (cat_progress.label == 'C').cumsum().tolist()
+            cat_ax.stackplot(
+                [t.matplotlib_date for t in cat_progress.time]
+                + [times[frame].matplotlib_date],
+                a_cumsum + [a_cumsum[-1]],
+                c_cumsum + [c_cumsum[-1]],
+                colors=('#4e79a7', '#f28e2b'),
+                clip_on=False,
+            )
+            recent_label = cat_progress.label.tolist()[-1]
+            color = '#4e79a7' if recent_label == 'A' else '#f28e2b'
+            progress_line.set_color(color)
+            time_box.txt._text.set_color(color)

     # Store user's rc settings, then update font stuff
     original_params = matplotlib.rcParams.copy()
     matplotlib.rcParams.update(matplotlib.rcParamsDefault)
     matplotlib.rcParams['font.sans-serif'] = 'Tex Gyre Heros'
     matplotlib.rcParams['mathtext.fontset'] = 'custom'
+    matplotlib.rcParams['font.size'] = 9
+
+    # Read in the features file, process into a catalog by subsetting to just one
+    # station and removing the unneeded features columns
+    catalog = pd.read_feather(features_file)
+    catalog = catalog[catalog.station == tr.stats.station][['time', 'label']]
+    catalog.time = [UTCDateTime(t) for t in catalog.time]
+
+    # Trim catalog duration to match waveform
+    catalog = catalog[(catalog.time >= starttime) & (catalog.time <= endtime)]
+    catalog.reset_index(inplace=True, drop=True)
+    print('Catalog label totals for this time period:')
+    print(catalog.label.value_counts())

     fig, *fargs = _spectrogram(
         tr,
+        catalog,
         starttime,
         endtime,
         is_infrasound,
@@ -264,7 +304,7 @@ def sonify(
     # MAKE COMBINED FILE

     tr_id_str = '_'.join([code for code in tr.id.split('.') if code])
-    output_file = output_dir / f'{tr_id_str}_{speed_up_factor}x.mp4'
+    output_file = output_dir / f'{tr_id_str}_{speed_up_factor}x_catalog.mp4'
     _ffmpeg_combine(audio_file, video_file, output_file, call_str)

     # Clean up temporary directory, just to be safe
@@ -273,6 +313,7 @@ def sonify(

 def _spectrogram(
     tr,
+    catalog,
     starttime,
     endtime,
     is_infrasound,
@@ -306,7 +347,7 @@ def _spectrogram(
     """

     if is_infrasound:
-        ylab = 'Pressure (Pa)'
+        ylab = 'Pressure\n(Pa)'
         clab = f'Power (dB rel. [{REFERENCE_PRESSURE * 1e6:g} ÂµPa]$^2$ Hz$^{{-1}}$)'
         ref_val = REFERENCE_PRESSURE
     else:
@@ -337,63 +378,174 @@ def _spectrogram(
     fig = Figure(figsize=np.array(RESOLUTION) / DPI)

     # width_ratios effectively controls the colorbar width
-    gs = GridSpec(2, 2, figure=fig, height_ratios=[2, 1], width_ratios=[40, 1])
+    gs = GridSpec(3, 2, figure=fig, height_ratios=[3, 1, 2], width_ratios=[40, 1])

     spec_ax = fig.add_subplot(gs[0, 0])
-    wf_ax = fig.add_subplot(gs[1, 0], sharex=spec_ax)  # Share x-axis with spec
+    wf_ax = fig.add_subplot(
+        gs[1, 0], sharex=spec_ax, zorder=10
+    )  # Share x-axis with spec
+    wf_ax.patch.set_alpha(0)
     cax = fig.add_subplot(gs[0, 1])
+    cat_ax = fig.add_subplot(gs[2, 0], sharex=spec_ax)  # Share x-axis with spec
+
+    tr_trim = tr.copy().trim(starttime, endtime)

     wf_lw = 0.5
-    wf_ax.plot(tr.times('matplotlib'), tr.data * rescale, '#b0b0b0', linewidth=wf_lw)
-    wf_progress = wf_ax.plot(np.nan, np.nan, 'black', linewidth=wf_lw)[0]
+    wf_ax.plot(
+        tr_trim.times('matplotlib'),
+        tr_trim.data * rescale,
+        '#b0b0b0',
+        linewidth=wf_lw,
+        clip_on=False,
+        solid_capstyle='round',
+        zorder=21,
+    )
+    wf_progress = wf_ax.plot(
+        np.nan,
+        np.nan,
+        'black',
+        linewidth=wf_lw,
+        clip_on=False,
+        solid_capstyle='round',
+        zorder=21,
+    )[0]
     wf_ax.set_ylabel(ylab)
-    wf_ax.grid(linestyle=':')
-    max_value = np.abs(tr.copy().trim(starttime, endtime).data).max() * rescale
+    max_value = np.abs(tr_trim.data).max() * rescale
     wf_ax.set_ylim(-max_value, max_value)

     im = spec_ax.pcolormesh(
-        t_mpl, f, sxx_db, cmap='inferno', shading='nearest', rasterized=True
+        t_mpl, f, sxx_db, cmap='summer', shading='nearest', rasterized=True
     )

     spec_ax.set_ylabel('Frequency (Hz)')
-    spec_ax.grid(linestyle=':')
     spec_ax.set_ylim(freq_lim)
     if log:
         spec_ax.set_yscale('log')

+    # Set up catalog axis
+    cat_ax.stackplot(
+        np.nan,
+        np.nan,
+        np.nan,
+        colors=('#4e79a7', '#f28e2b'),
+        labels=('S', 'N'),
+        clip_on=False,
+    )
+    cat_ax.set_ylim(0, catalog.shape[0])
+    cat_ax.set_ylabel('Cumulative # of\nlabeled events')
+    cat_ax.legend(
+        loc='upper left', title='Subcrater', bbox_to_anchor=(1, 1.1), frameon=False
+    )
+
     # Tick locating and formatting
     locator = mdates.AutoDateLocator()
     wf_ax.xaxis.set_major_locator(locator)
-    wf_ax.xaxis.set_major_formatter(_UTCDateFormatter(locator, is_local_time))
+    cat_ax.xaxis.set_major_formatter(_UTCDateFormatter(locator, is_local_time))
+    for ax in spec_ax, wf_ax:
+        ax.xaxis.offsetText.set_visible(False)
     fig.autofmt_xdate()

     # "Crop" x-axis!
     wf_ax.set_xlim(starttime.matplotlib_date, endtime.matplotlib_date)

     # Initialize animated stuff
-    line_kwargs = dict(x=starttime.matplotlib_date, color='forestgreen', linewidth=1)
-    spec_line = spec_ax.axvline(**line_kwargs)
-    wf_line = wf_ax.axvline(ymin=0.01, clip_on=False, zorder=10, **line_kwargs)
+    timing_color = 'black'
     time_box = AnchoredText(
-        s=starttime.strftime('%H:%M:%S'),
+        s=starttime.strftime('%H:%M'),
         pad=0.2,
         loc='lower right',
-        bbox_to_anchor=[1, 1],
-        bbox_transform=wf_ax.transAxes,
+        bbox_to_anchor=[1, 0],
+        bbox_transform=spec_ax.transAxes,
         borderpad=0,
-        prop=dict(color='forestgreen'),
+        prop=dict(color=timing_color),
     )
     time_box.txt._text.set_y(-5)  # [pixels] Shift text to vertically center it
-    time_box.zorder = 12  # This should place it on the very top; see below
     time_box.patch.set_linewidth(matplotlib.rcParams['axes.linewidth'])
-    wf_ax.add_artist(time_box)

-    # Adjustments to ensure time marker line is zordered properly
-    # 9 is below marker; 11 is above marker
-    spec_ax.spines['bottom'].set_zorder(9)
-    wf_ax.spines['top'].set_zorder(9)
-    for side in 'bottom', 'left', 'right':
-        wf_ax.spines[side].set_zorder(11)
+    # MAKE TIME BOX GO ON TOP OF EVERYTHING
+    box_ax = fig.add_subplot(gs[0, 0], zorder=12, sharex=spec_ax, sharey=spec_ax)
+    for side in 'top', 'bottom':
+        box_ax.spines[side].set_visible(False)
+    box_ax.tick_params(
+        which='both',
+        left=False,
+        labelleft=False,
+        bottom=False,
+        labelbottom=False,
+    )
+    box_ax.patch.set_alpha(0)
+    box_ax.add_artist(time_box)
+
+    # MAKE BOTTOM SPINE GO ON TOP OF GRIDLINES
+    blah_ax = fig.add_subplot(gs[0, 0], zorder=10)
+    for side in 'left', 'right', 'top':
+        blah_ax.spines[side].set_visible(False)
+    blah_ax.tick_params(
+        which='both',
+        left=False,
+        labelleft=False,
+        bottom=False,
+        labelbottom=False,
+    )
+    blah_ax.patch.set_alpha(0)
+
+    spec_ax.tick_params(axis='x', which='both', bottom=False)
+
+    # WF axis adjustments
+    for side in 'top', 'bottom', 'right':
+        wf_ax.spines[side].set_visible(False)
+    wf_ax_ticks = wf_ax.get_yticks()
+    wf_ax.set_ylim(-250, 250)  # TODO HARDCODED
+    wf_ax.tick_params(axis='x', which='both', bottom=False)
+
+    # CAT axis adjustments
+    for side in 'top', 'right':
+        cat_ax.spines[side].set_visible(False)
+    cat_ax.set_ylim(top=100)  # TODO HARDCODED
+
+    # UNIFIED X-AXIS GRIDLINES
+    grid_ax = fig.add_subplot(gs[:, 0], zorder=9, sharex=cat_ax)
+    for spine in grid_ax.spines.values():
+        spine.set_visible(False)
+    grid_params = dict(
+        color=matplotlib.rcParams['grid.color'],
+        linewidth=matplotlib.rcParams['grid.linewidth'],
+        linestyle=':',
+    )
+    for x in cat_ax.get_xticks()[1:-1]:
+        grid_ax.axvline(x=x, **grid_params)
+    grid_ax.tick_params(
+        which='both',
+        left=False,
+        labelleft=False,
+        bottom=False,
+        labelbottom=False,
+    )
+    grid_ax.patch.set_alpha(0)
+
+    spec_ax.grid(which='both', axis='y', **grid_params)
+
+    # AXIS FOR PROGRESS LINE
+    line_ax = fig.add_subplot(gs[:, 0], zorder=11, sharex=cat_ax)
+    for side in 'left', 'right':
+        line_ax.spines[side].set_visible(False)
+    line_ax.tick_params(
+        which='both',
+        left=False,
+        labelleft=False,
+        bottom=False,
+        labelbottom=False,
+    )
+    line_ax.patch.set_alpha(0)
+    progress_line = line_ax.axvline(
+        clip_on=False,
+        ymin=0.001,
+        x=starttime.matplotlib_date,
+        color=timing_color,
+        linewidth=matplotlib.rcParams[
+            'axes.linewidth'
+        ],  # Start w/ axis width TODO DOES THIS MATTER?
+    )

     # Pick smart limits rounded to nearest 10
     if db_lim == 'smart':
@@ -423,10 +575,8 @@ def _spectrogram(

     fig.colorbar(im, cax, extend=extend, extendfrac=EXTENDFRAC, label=clab)

-    spec_ax.set_title(tr.id)
-
     fig.tight_layout()
-    fig.subplots_adjust(hspace=0, wspace=0.05)
+    fig.subplots_adjust(hspace=0.25, wspace=0.05)

     # Finnicky formatting to get extension triangles (if they exist) to extend
     # above and below the vertical extent of the spectrogram axes
@@ -446,7 +596,7 @@ def _spectrogram(
         pass
     cax.set_position([pos.xmin, ymin, pos.width, height])

-    return fig, spec_line, wf_line, time_box, wf_progress
+    return fig, progress_line, time_box, wf_progress, cat_ax


 def _ffmpeg_combine(audio_file, video_file, output_file, call_str):
@@ -482,6 +632,8 @@ def _ffmpeg_combine(audio_file, video_file, output_file, call_str):
         '320k',
         '-ac',
         '2',
+        '-maxrate',
+        '1.5M',
         '-metadata',
         f'artist=sonify, rev. {__version__}',
         '-metadata',
